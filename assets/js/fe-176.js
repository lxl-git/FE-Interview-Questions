(window.webpackJsonp=window.webpackJsonp||[]).push([[176],{1125:function(e,t,n){"use strict";n.r(t);var a=n(52),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"一、环境搭建"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、环境搭建"}},[e._v("#")]),e._v(" 一、环境搭建")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ npm install dva-cli -g\n\n# 创建应用\n$ dva new dva-quickstart\n\n# 启动\n$ npm start\n")])])]),n("blockquote",[n("p",[e._v("react项目的推荐目录结构（如果使用dva脚手架创建，则自动生成如下）")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("|── /mock/             # 数据mock的接口文件  \n|── /src/              # 项目源码目录（我们开发的主要工作区域）   \n|   |── /components/   # 项目组件（用于路由组件内引用的可复用组件）   \n|   |── /routes/       # 路由组件（页面维度） \n|   |  |── route1.js  \n|   |  |── route2.js   # 根据router.js中的映射，在不同的url下，挂载不同的路由组件\n|   |  └── route3.js    \n|   |── /models/       # 数据模型（可以理解为store，用于存储数据与方法）  \n|   |  |── model1.js  \n|   |  |── model2.js   # 选择分离为多个model模型，是根据业务实体进行划分\n|   |  └── model3.js  \n|   |── /services/     # 数据接口（处理前台页面的ajax请求，转发到后台）   \n|   |── /utils/        # 工具函数（工具库，存储通用函数与配置参数）     \n|   |── router.js       # 路由配置（定义路由与对应的路由组件）  \n|   |── index.js       # 入口文件  \n|   |── index.less      \n|   └── index.html     \n|── package.json       # 项目信息  \n└── proxy.config.js    # 数据mock配置\n")])])]),n("p",[n("strong",[e._v("使用 antd")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("npm i babel-plugin-import --save\n")])])]),n("blockquote",[n("p",[n("code",[e._v("babel-plugin-import")]),e._v(" 是用来按需加载 "),n("code",[e._v("antd")]),e._v(" 的脚本和样式的")])]),e._v(" "),n("ul",[n("li",[e._v("编辑 "),n("code",[e._v(".webpackrc")]),e._v("，使 "),n("code",[e._v("babel-plugin-import")]),e._v(" 插件生效")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('{\n+  "extraBabelPlugins": [\n+    ["import", { "libraryName": "antd", "libraryDirectory": "es", "style": "css" }]\n+  ]\n}\n')])])]),n("h2",{attrs:{id:"二、初识dva"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、初识dva"}},[e._v("#")]),e._v(" 二、初识Dva")]),e._v(" "),n("h3",{attrs:{id:"_2-1-dva的特性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-dva的特性"}},[e._v("#")]),e._v(" 2.1 Dva的特性")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("dva = React-Router + Redux + Redux-saga\n")])])]),n("ul",[n("li",[e._v("仅有 5 个"),n("code",[e._v("API")]),e._v("，仅有5个主要的"),n("code",[e._v("api")])]),e._v(" "),n("li",[e._v("支持 "),n("code",[e._v("HMR")]),e._v("，支持模块的热更新")]),e._v(" "),n("li",[e._v("支持 "),n("code",[e._v("SSR (ServerSideRender)")]),e._v("，支持服务器端渲染")]),e._v(" "),n("li",[e._v("支持 "),n("code",[e._v("Mobile/ReactNative")]),e._v("，支持移动手机端的代码编写")]),e._v(" "),n("li",[e._v("支持"),n("code",[e._v("TypeScript")])]),e._v(" "),n("li",[e._v("支持路由和 "),n("code",[e._v("Model")]),e._v(" 的动态加载")])]),e._v(" "),n("h3",{attrs:{id:"_2-2-dva的五个api"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-dva的五个api"}},[e._v("#")]),e._v(" 2.2 Dva的五个API")]),e._v(" "),n("p",[n("img",{staticClass:"lazy",attrs:{alt:"img","data-src":"https://s.poetries.top/gitee/20191001/43.png",loading:"lazy"}})]),e._v(" "),n("h4",{attrs:{id:"_2-2-1-app-dva-opts"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-app-dva-opts"}},[e._v("#")]),e._v(" 2.2.1 app = dva(Opts)")]),e._v(" "),n("blockquote",[n("p",[n("code",[e._v("app = dva(Opts)")]),e._v("：创建应用，返回 "),n("code",[e._v("dva")]),e._v(" 实例。(注：dva 支持多实例)**")])]),e._v(" "),n("p",[e._v("在"),n("code",[e._v("opts")]),e._v("可以配置所有的"),n("code",[e._v("hooks")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const app = dva({\n     history,\n     initialState,\n     onError,\n     onAction,\n     onStateChange,\n     onReducer,\n     onEffect,\n     onHmr,\n     extraReducers,\n     extraEnhancers,\n});\n")])])]),n("blockquote",[n("p",[e._v("hooks包含如下配置项")])]),e._v(" "),n("p",[e._v("1、 "),n("code",[e._v("onError((err, dispatch) => {})")])]),e._v(" "),n("ul",[n("li",[n("code",[e._v("effect")]),e._v(" 执行错误或 "),n("code",[e._v("subscription")]),e._v(" 通过"),n("code",[e._v("done")]),e._v(" 主动抛错时触发，可用于管理全局出错状态")]),e._v(" "),n("li",[e._v("注意："),n("code",[e._v("subscription")]),e._v(" 并没有加 "),n("code",[e._v("try...catch")]),e._v("，所以有错误时需通过第二个参数 "),n("code",[e._v("done")]),e._v(" 主动抛错")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("app.model({\n  subscriptions: {\n    setup({ dispatch }, done) {\n      done(e)\n    },\n  },\n})\n")])])]),n("p",[e._v("2、 "),n("code",[e._v("onAction(fn | fn[])")])]),e._v(" "),n("blockquote",[n("p",[e._v("在"),n("code",[e._v("action")]),e._v("被"),n("code",[e._v("dispatch")]),e._v("时触发，用于注册 "),n("code",[e._v("redux")]),e._v(" 中间件。支持函数或函数数组格式")])]),e._v(" "),n("ul",[n("li",[e._v("例如我们要通过 "),n("code",[e._v("redux-logger")]),e._v(" 打印日志")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import createLogger from 'redux-logger';\nconst app = dva({\n  onAction: createLogger(opts),\n})\n")])])]),n("p",[e._v("3、 "),n("code",[e._v("onStateChange(fn)")])]),e._v(" "),n("blockquote",[n("p",[n("code",[e._v("state")]),e._v(" 改变时触发，可用于同步 state 到 "),n("code",[e._v("localStorage")]),e._v("，服务器端等")])]),e._v(" "),n("p",[e._v("4、 "),n("code",[e._v("onReducer(fn)")])]),e._v(" "),n("blockquote",[n("p",[e._v("封装 "),n("code",[e._v("reducer")]),e._v(" 执行，比如借助 "),n("code",[e._v("redux-undo")]),e._v(" 实现 "),n("code",[e._v("redo/undo")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import undoable from 'redux-undo';\nconst app = dva({\n  onReducer: reducer => {\n    return (state, action) => {\n      const undoOpts = {};\n      const newState = undoable(reducer, undoOpts)(state, action);\n      // 由于 dva 同步了 routing 数据，所以需要把这部分还原\n      return { ...newState, routing: newState.present.routing };\n    },\n  },\n})\n")])])]),n("p",[e._v("5、 "),n("code",[e._v("onEffect(fn)")])]),e._v(" "),n("blockquote",[n("p",[e._v("封装 "),n("code",[e._v("effect")]),e._v(" 执行。比如 "),n("code",[e._v("dva-loading")]),e._v(" 基于此实现了自动处理 "),n("code",[e._v("loading")]),e._v(" 状态")])]),e._v(" "),n("p",[e._v("6、 "),n("code",[e._v("onHmr(fn)")])]),e._v(" "),n("blockquote",[n("p",[e._v("热替换相关，目前用于 "),n("code",[e._v("babel-plugin-dva-hmr")])])]),e._v(" "),n("p",[e._v("7、 "),n("code",[e._v("extraReducers")])]),e._v(" "),n("blockquote",[n("p",[e._v("指定额外的 "),n("code",[e._v("reducer")]),e._v("，比如 "),n("code",[e._v("redux-form")]),e._v(" 需要指定额外的 "),n("code",[e._v("form reducer")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import { reducer as formReducer } from 'redux-form'\nconst app = dva({\n  extraReducers: {\n    form: formReducer,\n  },\n})\n")])])]),n("blockquote",[n("p",[e._v("这里比较常用的是，"),n("code",[e._v("history")]),e._v("的配置，一般默认的是"),n("code",[e._v("hashHistory")]),e._v("，如果要配置 "),n("code",[e._v("history")]),e._v("为 "),n("code",[e._v("browserHistory")]),e._v("，可以这样")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import createHistory from 'history/createBrowserHistory';\nconst app = dva({\n  history: createHistory(),\n});\n")])])]),n("blockquote",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("initialState`：指定初始数据，优先级高于 `model` 中的 `state`，默认是 `{}`，但是基本上都在`modal`里面设置相应的`state\n")])])])]),e._v(" "),n("h4",{attrs:{id:"_2-2-2-app-use-hooks"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-app-use-hooks"}},[e._v("#")]),e._v(" 2.2.2 app.use(Hooks)")]),e._v(" "),n("blockquote",[n("p",[e._v("app.use(Hooks)：配置 hooks 或者注册插件")])]),e._v(" "),n("p",[e._v("这里最常见的就是"),n("code",[e._v("dva-loading")]),e._v("插件的配置")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import createLoading from 'dva-loading';\n...\napp.use(createLoading(opts));\n")])])]),n("blockquote",[n("p",[e._v("但是一般对于全局的"),n("code",[e._v("loading")]),e._v("我们会根据业务的不同来显示相应不同的"),n("code",[e._v("loading")]),e._v("图标，我们可以根据自己的需要来选择注册相应的插件")])]),e._v(" "),n("h4",{attrs:{id:"_2-2-3-app-model-modelobject"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-app-model-modelobject"}},[e._v("#")]),e._v(" 2.2.3 app.model(ModelObject)")]),e._v(" "),n("blockquote",[n("p",[n("code",[e._v("app.model(ModelObject)")]),e._v("：这个是你数据逻辑处理，数据流动的地方")])]),e._v(" "),n("p",[n("img",{staticClass:"lazy",attrs:{alt:"img","data-src":"https://s.poetries.top/gitee/20191001/44.png",loading:"lazy"}})]),e._v(" "),n("h4",{attrs:{id:"_2-2-4-app-unmodel-namespace"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-4-app-unmodel-namespace"}},[e._v("#")]),e._v(" 2.2.4 app.unmodel(namespace)")]),e._v(" "),n("blockquote",[n("p",[e._v("取消 "),n("code",[e._v("model")]),e._v(" 注册，清理 "),n("code",[e._v("reducers")]),e._v(","),n("code",[e._v("effects")]),e._v(" 和 "),n("code",[e._v("subscriptions")]),e._v("。"),n("code",[e._v("subscription")]),e._v(" 如果没有返回 "),n("code",[e._v("unlisten")]),e._v(" 函数，使用 "),n("code",[e._v("app.unmodel")]),e._v(" 会给予警告")])]),e._v(" "),n("h4",{attrs:{id:"_2-2-5-app-router-function"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-5-app-router-function"}},[e._v("#")]),e._v(" 2.2.5 app.router(Function)")]),e._v(" "),n("blockquote",[n("p",[e._v("注册路由表，这一操作步骤在dva中也很重要")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 注册路由\napp.router(require('./router'))\n\n\n// 路由文件\nimport { Router, Route } from 'dva/router';\nimport IndexPage from './routes/IndexPage'\nimport TodoList from './routes/TodoList'\n\nfunction RouterConfig({ history }) {\n  return (\n    <Router history={history}>\n        <Route path=\"/\" component={IndexPage} />\n        <Route path='/todoList' components={TodoList}/>\n    </Router>\n  )\n}\nexport default RouterConfig\n")])])]),n("blockquote",[n("p",[e._v("如果我们想解决组件动态加载问题，我们的路由文件也可以按照下面的写法来写")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import { Router, Switch, Route } from 'dva/router'\nimport dynamic from 'dva/dynamic'\n\nfunction RouterConfig({ history, app }) {\n  const IndexPage = dynamic({\n    app,\n    component: () => import('./routes/IndexPage'),\n  })\n\n  const Users = dynamic({\n    app,\n    models: () => [import('./models/users')],\n    component: () => import('./routes/Users'),\n  })\n\n  return (\n    <Router history={history}>\n      <Switch>\n        <Route exact path=\"/\" component={IndexPage} />\n        <Route exact path=\"/users\" component={Users} />\n      </Switch>\n    </Router>\n  )\n}\n\nexport default RouterConfig\n")])])]),n("blockquote",[n("p",[e._v("其中"),n("code",[e._v("dynamic(opts)")]),e._v(" 中"),n("code",[e._v("opt")]),e._v("包含三个配置项：")])]),e._v(" "),n("ul",[n("li",[n("code",[e._v("app")]),e._v(": "),n("code",[e._v("dva")]),e._v(" 实例，加载 "),n("code",[e._v("models")]),e._v(" 时需要")]),e._v(" "),n("li",[n("code",[e._v("models")]),e._v(": 返回 "),n("code",[e._v("Promise")]),e._v(" 数组的函数，"),n("code",[e._v("Promise")]),e._v("返回 dva model`")]),e._v(" "),n("li",[n("code",[e._v("component")]),e._v("：返回 "),n("code",[e._v("Promise")]),e._v("的函数，"),n("code",[e._v("Promise")]),e._v("返回 "),n("code",[e._v("React Component")])])]),e._v(" "),n("h4",{attrs:{id:"_2-2-6-app-start"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-6-app-start"}},[e._v("#")]),e._v(" 2.2.6 app.start")]),e._v(" "),n("blockquote",[n("p",[e._v("启动应用，即将我们的应用跑起来")])]),e._v(" "),n("h3",{attrs:{id:"_2-3-dva九个概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-dva九个概念"}},[e._v("#")]),e._v(" 2.3 Dva九个概念")]),e._v(" "),n("h4",{attrs:{id:"_2-3-1-state"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1-state"}},[e._v("#")]),e._v(" 2.3.1 State")]),e._v(" "),n("blockquote",[n("p",[e._v("初始值，我们在 "),n("code",[e._v("dva()")]),e._v(" 初始化的时候和在 modal 里面的 "),n("code",[e._v("state")]),e._v(" 对其两处进行定义，其中 modal 中的优先级低于传给 "),n("code",[e._v("dva()")]),e._v(" 的 "),n("code",[e._v("opts.initialState")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// dva()初始化\nconst app = dva({\n  initialState: { count: 1 },\n});\n\n// modal()定义事件\napp.model({\n  namespace: 'count',\n  state: 0,\n});\n")])])]),n("h4",{attrs:{id:"_2-3-2-action"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-action"}},[e._v("#")]),e._v(" 2.3.2 Action")]),e._v(" "),n("blockquote",[n("p",[e._v("表示操作事件，可以是同步，也可以是异步")])]),e._v(" "),n("ul",[n("li",[n("code",[e._v("action")]),e._v(" 的格式如下，它需要有一个 "),n("code",[e._v("type")]),e._v("，表示这个 "),n("code",[e._v("action")]),e._v(" 要触发什么操作；"),n("code",[e._v("payload")]),e._v(" 则表示这个 "),n("code",[e._v("action")]),e._v(" 将要传递的数据")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("{\n  type: String,\n  payload: data,\n}\n")])])]),n("blockquote",[n("p",[e._v("我们通过 dispatch 方法来发送一个 action")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("dispatch({ type: 'todos/add', payload: 'Learn Dva' });\n")])])]),n("blockquote",[n("p",[e._v("其实我们可以构建一个Action 创建函数，如下")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function addTodo(text) {\n  return {\n    type: ADD_TODO,\n    text\n  }\n}\n\n//我们直接dispatch(addTodo()),就发送了一个action。\ndispatch(addTodo())\n")])])]),n("h4",{attrs:{id:"_2-3-3-model"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-3-model"}},[e._v("#")]),e._v(" 2.3.3 Model")]),e._v(" "),n("blockquote",[n("p",[n("code",[e._v("model")]),e._v(" 是 "),n("code",[e._v("dva")]),e._v(" 中最重要的概念，"),n("code",[e._v("Model")]),e._v(" 非 "),n("code",[e._v("MVC")]),e._v(" 中的 "),n("code",[e._v("M")]),e._v("，而是领域模型，用于把数据相关的逻辑聚合到一起，几乎所有的数据，逻辑都在这边进行处理分发")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import queryString from 'query-string'\nimport * as todoService from '../services/todo'\n\nexport default {\n  namespace: 'todo',\n  state: {\n    list: []\n  },\n  reducers: {\n    save(state, { payload: { list } }) {\n      return { ...state, list }\n    }\n  },\n  effects: {\n    *addTodo({ payload: value }, { call, put, select }) {\n      // 模拟网络请求\n      const data = yield call(todoService.query, value)\n      console.log(data)\n      let tempList = yield select(state => state.todo.list)\n      let list = []\n      list = list.concat(tempList)\n      const tempObj = {}\n      tempObj.title = value\n      tempObj.id = list.length\n      tempObj.finished = false\n      list.push(tempObj)\n      yield put({ type: 'save', payload: { list }})\n    },\n    *toggle({ payload: index }, { call, put, select }) {\n      // 模拟网络请求\n      const data = yield call(todoService.query, index)\n      let tempList = yield select(state => state.todo.list)\n      let list = []\n      list = list.concat(tempList)\n      let obj = list[index]\n      obj.finished = !obj.finished\n      yield put({ type: 'save', payload: { list } })\n    },\n    *delete({ payload: index }, { call, put, select }) {\n      const data = yield call(todoService.query, index)\n      let tempList = yield select(state => state.todo.list)\n      let list = []\n      list = list.concat(tempList)\n      list.splice(index, 1)\n      yield put({ type: 'save', payload: { list } })\n    },\n    *modify({ payload: { value, index } }, { call, put, select }) {\n      const data = yield call(todoService.query, value)\n      let tempList = yield select(state => state.todo.list)\n      let list = []\n      list = list.concat(tempList)\n      let obj = list[index]\n      obj.title = value\n      yield put({ type: 'save', payload: { list } })\n    }\n  },\n  subscriptions: {\n    setup({ dispatch, history }) {\n      // 监听路由的变化，请求页面数据\n      return history.listen(({ pathname, search }) => {\n        const query = queryString.parse(search)\n        let list = []\n        if (pathname === 'todoList') {\n          dispatch({ type: 'save', payload: {list} })\n        }\n      })\n    }\n  }\n}\n")])])]),n("blockquote",[n("p",[n("code",[e._v("model")]),e._v("对象中包含5个重要的属性")])]),e._v(" "),n("p",[n("strong",[e._v("state")])]),e._v(" "),n("blockquote",[n("p",[e._v("这里的 state 跟我们刚刚讲的 state 的概念是一样的，只不过她的优先级比初始化的低，但是基本上项目中的 state 都是在这里定义的")])]),e._v(" "),n("p",[n("strong",[e._v("namespace")])]),e._v(" "),n("blockquote",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("model` 的命名空间，同时也是他在全局 `state` 上的属性，只能用字符串，我们发送在发送 `action` 到相应的 `reducer` 时，就会需要用到 `namespace\n")])])])]),e._v(" "),n("p",[n("strong",[e._v("Reducer")])]),e._v(" "),n("blockquote",[n("p",[e._v("以"),n("code",[e._v("key/value")]),e._v(" 格式定义 "),n("code",[e._v("reducer")]),e._v("，用于处理同步操作，唯一可以修改 "),n("code",[e._v("state")]),e._v(" 的地方。由 "),n("code",[e._v("action")]),e._v(" 触发。其实一个纯函数")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("namespace: 'todo',\n  state: {\n    list: []\n  },\n  // reducers 写法\n  reducers: {\n    save(state, { payload: { list } }) {\n      return { ...state, list }\n    }\n }\n")])])]),n("p",[n("strong",[e._v("Effect")])]),e._v(" "),n("blockquote",[n("p",[e._v("用于处理异步操作和业务逻辑，不直接修改 "),n("code",[e._v("state")]),e._v("，简单的来说，就是获取从服务端获取数据，并且发起一个 "),n("code",[e._v("action")]),e._v("交给"),n("code",[e._v("reducer")]),e._v(" 的地方")])]),e._v(" "),n("p",[e._v("其中它用到了"),n("code",[e._v("redux-saga")]),e._v("，里面有几个常用的函数。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// effects 写法\neffects: {\n    *addTodo({ payload: value }, { call, put, select }) {\n      // 模拟网络请求\n      const data = yield call(todoService.query, value)\n      console.log(data)\n      let tempList = yield select(state => state.todo.list)\n      let list = []\n      list = list.concat(tempList)\n      const tempObj = {}\n      tempObj.title = value\n      tempObj.id = list.length\n      tempObj.finished = false\n      list.push(tempObj)\n      yield put({ type: 'save', payload: { list }})\n    },\n    *toggle({ payload: index }, { call, put, select }) {\n      // 模拟网络请求\n      const data = yield call(todoService.query, index)\n      let tempList = yield select(state => state.todo.list)\n      let list = []\n      list = list.concat(tempList)\n      let obj = list[index]\n      obj.finished = !obj.finished\n      yield put({ type: 'save', payload: { list } })\n    },\n    *delete({ payload: index }, { call, put, select }) {\n      const data = yield call(todoService.query, index)\n      let tempList = yield select(state => state.todo.list)\n      let list = []\n      list = list.concat(tempList)\n      list.splice(index, 1)\n      yield put({ type: 'save', payload: { list } })\n    },\n    *modify({ payload: { value, index } }, { call, put, select }) {\n      const data = yield call(todoService.query, value)\n      let tempList = yield select(state => state.todo.list)\n      let list = []\n      list = list.concat(tempList)\n      let obj = list[index]\n      obj.title = value\n      yield put({ type: 'save', payload: { list } })\n    }\n}\n")])])]),n("p",[n("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://s.poetries.top/uploads/2022/07/b562e0491752f259.png",loading:"lazy"}})]),e._v(" "),n("blockquote",[n("p",[e._v("在项目中最主要的会用到的是 "),n("code",[e._v("put")]),e._v(" 与 "),n("code",[e._v("call")])])]),e._v(" "),n("p",[n("strong",[e._v("Subscription")])]),e._v(" "),n("blockquote",[n("ul",[n("li",[e._v("以 "),n("code",[e._v("key/value")]),e._v(" 格式定义 "),n("code",[e._v("subscription")]),e._v("，"),n("code",[e._v("subscription")]),e._v(" 是订阅，用于订阅一个数据源，然后根据需要 dispatch 相应的 action")]),e._v(" "),n("li",[n("code",[e._v("subscription")]),e._v(" 是订阅，用于订阅一个数据源，然后根据需要 "),n("code",[e._v("dispatch")]),e._v(" 相应的"),n("code",[e._v("action")]),e._v("。在 "),n("code",[e._v("app.start()")]),e._v(" 时被执行，数据源可以是当前的时间、当前页面的"),n("code",[e._v("url")]),e._v("、服务器的 "),n("code",[e._v("websocket")]),e._v(" 连接、"),n("code",[e._v("history")]),e._v("路由变化等等。")])])]),e._v(" "),n("ul",[n("li",[n("strong",[e._v("注意")]),e._v("：如果要使用 "),n("code",[e._v("app.unmodel()")]),e._v("，"),n("code",[e._v("subscription")]),e._v(" 必须返回 "),n("code",[e._v("unlisten")]),e._v(" 方法，用于取消数据订阅")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// subscriptions 写法\nsubscriptions: {\n    setup({ dispatch, history }) {\n      // 监听路由的变化，请求页面数据\n      return history.listen(({ pathname, search }) => {\n        const query = queryString.parse(search)\n        let list = []\n        if (pathname === 'todoList') {\n          dispatch({ type: 'save', payload: {list} })\n        }\n      })\n    }\n  }\n")])])]),n("h4",{attrs:{id:"_2-3-4-router"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-4-router"}},[e._v("#")]),e._v(" 2.3.4 Router")]),e._v(" "),n("blockquote",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Router` 表示路由配置信息，项目中的 `router.js\n")])])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('export default function({ history }){\n  return(\n    <Router history={history}>\n      <Route path="/" component={App} />\n    </Router>\n  );\n}\n')])])]),n("p",[n("strong",[e._v("RouteComponent")])]),e._v(" "),n("blockquote",[n("p",[n("code",[e._v("RouteComponent")]),e._v(" 表示"),n("code",[e._v("Router")]),e._v(" 里匹配路径的 "),n("code",[e._v("Component")]),e._v("，通常会绑定"),n("code",[e._v("model")]),e._v("的数据。如下:")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import { connect } from 'dva';\n\nfunction App() {\n  return <div>App</div>;\n}\n\nfunction mapStateToProps(state) {\n  return { todos: state.todos };\n}\n\nexport default connect(mapStateToProps)(App);\n")])])]),n("h3",{attrs:{id:"_2-4-整体架构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-整体架构"}},[e._v("#")]),e._v(" 2.4 整体架构")]),e._v(" "),n("p",[n("img",{staticClass:"lazy",attrs:{alt:"img","data-src":"https://s.poetries.top/gitee/20191001/45.png",loading:"lazy"}})]),e._v(" "),n("ul",[n("li",[e._v("首先我们根据 "),n("code",[e._v("url")]),e._v(" 访问相关的 "),n("code",[e._v("Route-Component")]),e._v("，在组件中我们通过 "),n("code",[e._v("dispatch")]),e._v("发送 "),n("code",[e._v("action")]),e._v(" 到 "),n("code",[e._v("model")]),e._v(" 里面的 "),n("code",[e._v("effect")]),e._v(" 或者直接 "),n("code",[e._v("Reducer")])]),e._v(" "),n("li",[e._v("当我们将"),n("code",[e._v("action")]),e._v("发送给"),n("code",[e._v("Effect")]),e._v("，基本上是取服务器上面请求数据的，服务器返回数据之后，"),n("code",[e._v("effect")]),e._v(" 会发送相应的 "),n("code",[e._v("action")]),e._v("给 "),n("code",[e._v("reducer")]),e._v("，由唯一能改变 "),n("code",[e._v("state")]),e._v("的 "),n("code",[e._v("reducer")]),e._v(" 改变 "),n("code",[e._v("state")]),e._v(" ，然后通过"),n("code",[e._v("connect")]),e._v("重新渲染组件。")]),e._v(" "),n("li",[e._v("当我们将"),n("code",[e._v("action")]),e._v("发送给"),n("code",[e._v("reducer")]),e._v("，那直接由 "),n("code",[e._v("reducer")]),e._v(" 改变 "),n("code",[e._v("state")]),e._v("，然后通过"),n("code",[e._v("connect")]),e._v("重新渲染组件")])]),e._v(" "),n("h3",{attrs:{id:"_2-5-dva图解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-dva图解"}},[e._v("#")]),e._v(" 2.5 Dva图解")]),e._v(" "),n("p",[n("strong",[e._v("图解一：加入Saga")])]),e._v(" "),n("blockquote",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("React` 只负责页面渲染, 而不负责页面逻辑, 页面逻辑可以从中单独抽取出来, 变成 `store\n")])])])]),e._v(" "),n("p",[n("img",{staticClass:"lazy",attrs:{alt:"img","data-src":"https://s.poetries.top/gitee/20191001/46.png",loading:"lazy"}})]),e._v(" "),n("blockquote",[n("p",[e._v("使用 "),n("code",[e._v("Middleware")]),e._v(" 拦截 "),n("code",[e._v("action")]),e._v(", 这样一来异步的网络操作也就很方便了, 做成一个 "),n("code",[e._v("Middleware")]),e._v("就行了, 这里使用"),n("code",[e._v("redux-saga")]),e._v(" 这个类库")])]),e._v(" "),n("ul",[n("li",[e._v("点击创建 "),n("code",[e._v("Todo")]),e._v("的按钮, 发起一个 "),n("code",[e._v("type == addTodo")]),e._v(" 的 "),n("code",[e._v("action")])]),e._v(" "),n("li",[n("code",[e._v("saga")]),e._v(" 拦截这个 "),n("code",[e._v("action")]),e._v(", 发起 "),n("code",[e._v("http")]),e._v(" 请求, 如果请求成功, 则继续向 "),n("code",[e._v("reducer")]),e._v(" 发一个 "),n("code",[e._v("type == addTodoSucc")]),e._v(" 的 "),n("code",[e._v("action")]),e._v(", 提示创建成功, 反之则发送 "),n("code",[e._v("type == addTodoFail")]),e._v(" 的"),n("code",[e._v("action")]),e._v(" 即可")])]),e._v(" "),n("p",[n("strong",[e._v("图解二：Dva表示法")])]),e._v(" "),n("p",[n("img",{staticClass:"lazy",attrs:{alt:"img","data-src":"https://s.poetries.top/gitee/20191001/47.png",loading:"lazy"}})]),e._v(" "),n("blockquote",[n("p",[e._v("dva做了 3 件很重要的事情")])]),e._v(" "),n("ul",[n("li",[e._v("把 "),n("code",[e._v("store")]),e._v("及 "),n("code",[e._v("saga")]),e._v(" 统一为一个 "),n("code",[e._v("model")]),e._v(" 的概念, 写在一个 js 文件里面")]),e._v(" "),n("li",[e._v("增加了一个 "),n("code",[e._v("Subscriptions")]),e._v(", 用于收集其他来源的 "),n("code",[e._v("action")]),e._v(", eg: 键盘操作")]),e._v(" "),n("li",[n("code",[e._v("model")]),e._v(" 写法很简约, 类似于 "),n("code",[e._v("DSL")]),e._v(" 或者 "),n("code",[e._v("RoR")])])]),e._v(" "),n("h2",{attrs:{id:"三、计数器例子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、计数器例子"}},[e._v("#")]),e._v(" 三、计数器例子")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ dva new myapp\n")])])]),n("p",[n("strong",[e._v("目录结构介绍")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(".\n├── mock    // mock数据文件夹\n├── node_modules // 第三方的依赖\n├── public  // 存放公共public文件的文件夹\n├── src  // 最重要的文件夹，编写代码都在这个文件夹下\n│   ├── assets // 可以放图片等公共资源\n│   ├── components // 就是react中的木偶组件\n│   ├── models // dva最重要的文件夹，所有的数据交互及逻辑都写在这里\n│   ├── routes // 就是react中的智能组件，不要被文件夹名字误导。\n│   ├── services // 放请求借口方法的文件夹\n│   ├── utils // 自己的工具方法可以放在这边\n│   ├── index.css // 入口文件样式\n│   ├── index.ejs // ejs模板引擎\n│   ├── index.js // 入口文件\n│   └── router.js // 项目的路由文件\n├── .eslintrc // bower安装目录的配置\n├── .editorconfig // 保证代码在不同编辑器可视化的工具\n├── .gitignore // git上传时忽略的文件\n├── .roadhogrc.js // 项目的配置文件，配置接口转发，css_module等都在这边。\n├── .roadhogrc.mock.js // 项目的配置文件\n└── package.json // 当前整一个项目的依赖\n")])])]),n("p",[n("strong",[e._v("首先是前端的页面，我们使用 class 形式来创建组件，原例子中是使用无状态来创建的。react 创建组件的各种方式，大家可以看"),n("a",{attrs:{href:"http://www.cnblogs.com/wonyun/p/5930333.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("React创建组件的三种方式及其区别"),n("OutboundLink")],1)])]),e._v(" "),n("blockquote",[n("p",[e._v("我们先修改"),n("code",[e._v("route/IndexPage.js")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import React from 'react';\nimport { connect } from 'dva';\nimport styles from './IndexPage.css';\n\nclass IndexPage extends React.Component {\n  render() {\n    const { dispatch } = this.props;\n\n    return (\n      <div className={styles.normal}>\n        <div className={styles.record}>Highest Record: 1</div>\n        <div className={styles.current}>2</div>\n        <div className={styles.button}>\n          <button onClick={() => {}}>+</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect()(IndexPage);\n")])])]),n("blockquote",[n("p",[e._v("同时修改样式"),n("code",[e._v("routes/IndexPage.css")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(".normal {\n  width: 200px;\n  margin: 100px auto;\n  padding: 20px;\n  border: 1px solid #ccc;\n  box-shadow: 0 0 20px #ccc;\n}\n.record {\n  border-bottom: 1px solid #ccc;\n  padding-bottom: 8px;\n  color: #ccc;\n}\n.current {\n  text-align: center;\n  font-size: 40px;\n  padding: 40px 0;\n}\n.button {\n  text-align: center;\n  button {\n    width: 100px;\n    height: 40px;\n    background: #aaa;\n    color: #fff;\n  }\n}\n")])])]),n("blockquote",[n("p",[e._v("在 "),n("code",[e._v("model")]),e._v(" 处理"),n("code",[e._v("state")]),e._v("，在页面里面输出 "),n("code",[e._v("model")]),e._v(" 中的 "),n("code",[e._v("state")])])]),e._v(" "),n("ul",[n("li",[e._v("首先我们在index.js中将"),n("code",[e._v("models/example.js")]),e._v("，即将model下一行的的注释打开")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import dva from 'dva';\nimport './index.css';\n\n// 1. Initialize\nconst app = dva();\n\n// 2. Plugins\n// app.use({});\n\n// 3. Model\napp.model(require('./models/example')); // 打开注释\n\n// 4. Router\napp.router(require('./router'));\n\n// 5. Start\napp.start('#root');\n")])])]),n("blockquote",[n("p",[e._v("接下来我们进入 "),n("code",[e._v("models/example.js")]),e._v("，将"),n("code",[e._v("namespace")]),e._v(" 名字改为 "),n("code",[e._v("count")]),e._v("，"),n("code",[e._v("state")]),e._v("对象加上 "),n("code",[e._v("record")]),e._v(" 与 "),n("code",[e._v("current")]),e._v(" 属性。如下")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("export default {\n  namespace: 'count',\n  state: {\n    record: 0,\n    current: 0,\n  },\n  ...\n};\n")])])]),n("blockquote",[n("p",[e._v("接着我们来到 "),n("code",[e._v("routes/indexpage.js")]),e._v(" 页面，通过的 "),n("code",[e._v("mapStateToProps")]),e._v("引入相关的 "),n("code",[e._v("state")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import React from 'react';\nimport { connect } from 'dva';\nimport styles from './IndexPage.css';\n\nclass IndexPage extends React.Component {\n  render() {\n    const { dispatch, count } = this.props;\n    \n    return (\n      <div className={styles.normal}>\n        <div className={styles.record}>\n         Highest Record: {count.record} // 将count的record输出\n        </div>\n        <div className={styles.current}>\n         {count.current}\n        </div>\n        <div className={styles.button}>\n          <button onClick={() => {} } >\n                 +\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return { count: state.count };\n} // 获取state\n\nexport default connect(mapStateToProps)(IndexPage);\n")])])]),n("blockquote",[n("p",[e._v("通过 "),n("code",[e._v("+")]),e._v(" 发送 "),n("code",[e._v("action")]),e._v("，通过 "),n("code",[e._v("reducer")]),e._v(" 改变相应的 "),n("code",[e._v("state")])])]),e._v(" "),n("ul",[n("li",[e._v("首先我们在 "),n("code",[e._v("models/example.js")]),e._v("，写相应的 "),n("code",[e._v("reducer")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("export default {\n  ...\n  reducers: {\n    add1(state) {\n      const newCurrent = state.current + 1;\n      return { ...state,\n        record: newCurrent > state.record ? newCurrent : state.record,\n        current: newCurrent,\n      };\n    },\n    minus(state) {\n      return { ...state, current: state.current - 1 };\n    },\n  },\n};\n")])])]),n("blockquote",[n("p",[e._v("在页面的模板 "),n("code",[e._v("routes/IndexPage.js")]),e._v(" 中 "),n("code",[e._v("+")]),e._v(" 号点击的时候，"),n("code",[e._v("dispatch")]),e._v("一个 "),n("code",[e._v("action")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import React from 'react';\nimport { connect } from 'dva';\nimport styles from './IndexPage.css';\n\nclass IndexPage extends React.Component {\n  render() {\n    const { dispatch, count } = this.props;\n    return (\n      <div className={styles.normal}>\n        <div className={styles.record}>Highest Record: {count.record}</div>\n        <div className={styles.current}>{count.current}</div>\n        <div className={styles.button}>\n          <button \n+            onClick={() => { dispatch({ type: 'count/add1' });}\n          }>+</button>\n        </div>\n      </div>\n    );\n  }\n}\nfunction mapStateToProps(state) {\n  return { count: state.count };\n}\n\nexport default connect(mapStateToProps)(IndexPage);\n")])])]),n("blockquote",[n("p",[e._v("接下来我们来使用 "),n("code",[e._v("effect")]),e._v(" 模拟一个数据接口请求，返回之后，通过 "),n("code",[e._v("yield put()")]),e._v(" 改变相应的 "),n("code",[e._v("state")])])]),e._v(" "),n("ul",[n("li",[e._v("首先我们替换相应的 "),n("code",[e._v("models/example.js")]),e._v(" 的 "),n("code",[e._v("effect")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("effects: {\n    *add(action, { call, put }) {\n      yield call(delay, 1000);\n      yield put({ type: 'minus' });\n    },\n},\n")])])]),n("blockquote",[n("p",[e._v("这里的 "),n("code",[e._v("delay")]),e._v("，是我这边写的一个延时的函数，我们在 "),n("code",[e._v("utils")]),e._v(" 里面编写一个 "),n("code",[e._v("utils.js")]),e._v(" ，一般请求接口的函数都会写在 "),n("code",[e._v("servers")]),e._v(" 文件夹中")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("export function delay(timeout) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, timeout);\n  });\n}\n")])])]),n("blockquote",[n("p",[e._v("订阅订阅键盘事件，使用 "),n("code",[e._v("subscriptions")]),e._v("，当用户按住 "),n("code",[e._v("command+up")]),e._v(" 时候触发添加数字的 "),n("code",[e._v("action")])])]),e._v(" "),n("ul",[n("li",[e._v("在 "),n("code",[e._v("models/example.js")]),e._v(" 中作如下修改")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("+import key from 'keymaster';\n...\napp.model({\n  namespace: 'count',\n+ subscriptions: {\n+   keyboardWatcher({ dispatch }) {\n+     key('⌘+up, ctrl+up', () => { dispatch({type:'add'}) });\n+   },\n+ },\n});\n")])])]),n("ul",[n("li",[e._v("在这里你需要安装 "),n("code",[e._v("keymaster")]),e._v(" 这个依赖")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("npm install keymaster --save\n")])])]),n("ul",[n("li",[e._v("现在你可以按住 "),n("code",[e._v("command+up")]),e._v(" 就可以使 "),n("code",[e._v("current")]),e._v(" 加1")])]),e._v(" "),n("h2",{attrs:{id:"四、dva实践"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四、dva实践"}},[e._v("#")]),e._v(" 四、Dva实践")]),e._v(" "),n("h3",{attrs:{id:"_4-1-抽离model"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-抽离model"}},[e._v("#")]),e._v(" 4.1 抽离Model")]),e._v(" "),n("blockquote",[n("p",[e._v("抽离"),n("code",[e._v("Model")]),e._v("，根据设计页面需求，设计相应的"),n("code",[e._v("Model")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// models/users.js\n// version1: 从数据维度抽取，更适用于无状态的数据\n// version2: 从业务状态抽取，将数据与组件的业务状态统一抽离成一个model\n// 新增部分为在数据维度基础上，改为从业务状态抽取而添加的代码\nexport default {\n  namespace: 'users',\n  state: {\n    list: [],\n    total: null,\n+   loading: false, // 控制加载状态\n+   current: null, // 当前分页信息\n+   currentItem: {}, // 当前操作的用户对象\n+   modalVisible: false, // 弹出窗的显示状态\n+   modalType: 'create', // 弹出窗的类型（添加用户，编辑用户）\n  },\n\n    // 异步操作\n    effects: {\n        *query(){},\n        *create(){},\n        *'delete'(){},   // 因为delete是关键字，特殊处理\n        *update(){},\n    },\n\n    // 替换状态树\n    reducers: {\n+       showLoading(){}, // 控制加载状态的 reducer\n+       showModel(){}, // 控制 Model 显示状态的 reducer\n+       hideModel(){},\n        querySuccess(){},\n        createSuccess(){},\n        deleteSuccess(){},\n        updateSuccess(){},\n    }\n}\n")])])]),n("h3",{attrs:{id:"_4-2-设计组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-设计组件"}},[e._v("#")]),e._v(" 4.2 设计组件")]),e._v(" "),n("blockquote",[n("p",[e._v("先设置容器组件的访问路径，再创建组件文件")])]),e._v(" "),n("h4",{attrs:{id:"_4-2-1-容器组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-1-容器组件"}},[e._v("#")]),e._v(" 4.2.1 容器组件")]),e._v(" "),n("blockquote",[n("p",[e._v("具有监听数据行为的组件，职责是绑定相关联的 model 数据，包含子组件；传入的数据来源于model")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import React, { Component, PropTypes } from 'react';\n\n// dva 的 connect 方法可以将组件和数据关联在一起\nimport { connect } from 'dva';\n\n// 组件本身\nconst MyComponent = (props)=>{};\n\n// propTypes属性，用于限制props的传入数据类型\nMyComponent.propTypes = {};\n\n// 声明模型传递函数，用于建立组件和数据的映射关系\n// 实际表示 将ModelA这一个数据模型，绑定到当前的组件中，则在当前组件中，随时可以取到ModelA的最新值\n// 可以绑定多个Model\nfunction mapStateToProps({ModelA}) {\n  return {ModelA};\n}\n\n// 关联 model\n// 正式调用模型传递函数，完成模型绑定\nexport default connect(mapStateToProps)(MyComponent);\n")])])]),n("h4",{attrs:{id:"_4-2-2-展示组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-2-展示组件"}},[e._v("#")]),e._v(" 4.2.2 展示组件")]),e._v(" "),n("blockquote",[n("p",[e._v("展示通过 "),n("code",[e._v("props")]),e._v(" 传递到组件内部数据；传入的数据来源于容器组件向展示组件的"),n("code",[e._v("props")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import React, { Component, PropTypes } from 'react';\n\n// 组件本身\n// 所需要的数据通过 Container Component 通过 props 传递下来\nconst MyComponent = (props)=>{}\nMyComponent.propTypes = {};\n\n// 并不会监听数据\nexport default MyComponent;\n")])])]),n("h4",{attrs:{id:"_4-2-3-设置路由"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-3-设置路由"}},[e._v("#")]),e._v(" 4.2.3 设置路由")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// .src/router.js\nimport React, { PropTypes } from 'react';\nimport { Router, Route } from 'dva/router';\nimport Users from './routes/Users';\n\nexport default function({ history }) {\n  return (\n    <Router history={history}>\n      <Route path=\"/users\" component={Users} />\n    </Router>\n  );\n};\n")])])]),n("p",[n("strong",[e._v("容器组件雏形")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// .src/routes/Users.jsx\nimport React, { PropTypes } from 'react';\n\nfunction Users() {\n  return (\n    <div>User Router Component</div>\n  );\n}\n\nexport default Users;\n")])])]),n("h4",{attrs:{id:"_4-2-4-设计容器组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-4-设计容器组件"}},[e._v("#")]),e._v(" 4.2.4 设计容器组件")]),e._v(" "),n("blockquote",[n("p",[e._v("自顶向下的设计方法：先设计容器组件，再逐步细化内部的展示容器")])]),e._v(" "),n("p",[e._v("组件的定义方式")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 方法一： es6 的写法，当组件设计react生命周期时，可采用这种写法\n// 具有生命周期的组件，可以在接收到传入数据变化时，自定义执行方法，有自己的行为模式\n// 比如在组件生成后调用xx请求(componentDidMount)、可以自己决定要不要更新渲染(shouldComponentUpdate)等\nclass App extends React.Component({});\n\n// 方法二： stateless 的写法，定义无状态组件\n// 无状态组件，仅仅根据传入的数据更新，修改自己的渲染内容\nconst App = (props) => ({});\n")])])]),n("p",[e._v("容器组件：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// ./src/routes/Users.jsx\nimport React, { Component, PropTypes } from 'react';\n\n// 引入展示组件 （暂时都没实现）\nimport UserList from '../components/Users/UserList';\nimport UserSearch from '../components/Users/UserSearch';\nimport UserModal from '../components/Users/UserModal';\n\n// 引入css样式表\nimport styles from './style.less'\n\nfunction Users() {\n\n  // 向userListProps中传入静态数据\n  const userSearchProps = {};\n  const userListProps = {\n    total: 3,\n    current: 1,\n    loading: false,\n    dataSource: [\n      {\n        name: '张三',\n        age: 23,\n        address: '成都',\n      },\n      {\n        name: '李四',\n        age: 24,\n        address: '杭州',\n      },\n      {\n        name: '王五',\n        age: 25,\n        address: '上海',\n      },\n    ],\n  };\n  const userModalProps = {};\n\n  return (\n    <div className={styles.normal}>\n      {/* 用户筛选搜索框 */}\n      <UserSearch {...userSearchProps} />\n      {/* 用户信息展示列表 */}\n      <UserList {...userListProps} />\n      {/* 添加用户 & 修改用户弹出的浮层 */}\n      <UserModal {...userModalProps} />\n    </div>\n  );\n}\n\n// 很关键的对外输出export；使外部可通过import引用使用此组件\nexport default Users;\n")])])]),n("p",[e._v("展示组件UserList")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// ./src/components/Users/UserList.jsx\nimport React, { Component, PropTypes } from 'react';\n\n// 采用antd的UI组件\nimport { Table, message, Popconfirm } from 'antd';\n\n// 采用 stateless 的写法\nconst UserList = ({\n    total,\n    current,\n    loading,\n    dataSource,\n}) => {\n  const columns = [{\n    title: '姓名',\n    dataIndex: 'name',\n    key: 'name',\n    render: (text) => <a href=\"#\">{text}</a>,\n  }, {\n    title: '年龄',\n    dataIndex: 'age',\n    key: 'age',\n  }, {\n    title: '住址',\n    dataIndex: 'address',\n    key: 'address',\n  }, {\n    title: '操作',\n    key: 'operation',\n    render: (text, record) => (\n      <p>\n        <a onClick={()=>{}}>编辑</a>\n         \n        <Popconfirm title=\"确定要删除吗？\" onConfirm={()=>{}}>\n          <a>删除</a>\n        </Popconfirm>\n      </p>\n    ),\n  }];\n\n  // 定义分页对象\n  const pagination = {\n    total,\n    current,\n    pageSize: 10,\n    onChange: ()=>{},\n  };\n\n\n  // 此处的Table标签使用了antd组件，传入的参数格式是由antd组件库本身决定的\n  // 此外还需要在index.js中引入antd  import 'antd/dist/antd.css'\n  return (\n    <div>\n      <Table\n        columns={columns}\n        dataSource={dataSource}\n        loading={loading}\n        rowKey={record => record.id}\n        pagination={pagination}\n      />\n    </div>\n  );\n}\n\nexport default UserList;\n")])])]),n("h3",{attrs:{id:"_4-3-添加reducer"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-添加reducer"}},[e._v("#")]),e._v(" 4.3 添加Reducer")]),e._v(" "),n("blockquote",[n("p",[e._v("在整个应用中，只有"),n("code",[e._v("model")]),e._v("中的"),n("code",[e._v("reducer")]),e._v("函数可以直接修改自己所在"),n("code",[e._v("model")]),e._v("的"),n("code",[e._v("state")]),e._v("参数，其余都是非法操作；\n并且必须使用"),n("code",[e._v("return {...state}")]),e._v("的形式进行修改")])]),e._v(" "),n("h4",{attrs:{id:"_4-3-1-第一步-实现reducer函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-1-第一步-实现reducer函数"}},[e._v("#")]),e._v(" 4.3.1 第一步：实现reducer函数")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// models/users.js\n// 使用静态数据返回，把userList中的静态数据移到此处\n// querySuccess这个action的作用在于，修改了model的数据\nexport default {\n  namespace: 'users',\n  state： {}，\n  subscriptions: {},\n  effects: {},\n  reducers: {\n    querySuccess(state){\n        const mock = {\n          total: 3,\n          current: 1,\n          loading: false,\n          list: [\n            {\n              id: 1,\n              name: '张三',\n              age: 23,\n              address: '成都',\n            },\n            {\n              id: 2,\n              name: '李四',\n              age: 24,\n              address: '杭州',\n            },\n            {\n              id: 3,\n              name: '王五',\n              age: 25,\n              address: '上海',\n            },\n          ]\n        };\n        // return 的内容是一个对象，涵盖原state中的所有属性，以实现“更新替换”的效果\n        return {...state, ...mock, loading: false};\n      }\n  }\n}\n")])])]),n("h4",{attrs:{id:"_4-3-2-第二步-关联model中的数据源"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-2-第二步-关联model中的数据源"}},[e._v("#")]),e._v(" 4.3.2 第二步：关联Model中的数据源")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// routes/Users.jsx\n\nimport React, { PropTypes } from 'react';\n\n// 最后用到了connect函数，需要在头部预先引入connect\nimport { connect } from 'dva';\n\nfunction Users({ location, dispatch, users }) {\n\n  const {\n    loading, list, total, current,\n    currentItem, modalVisible, modalType\n    } = users;\n\n  const userSearchProps={};\n\n  // 使用传入的数据源，进行数据渲染\n  const userListProps={\n    dataSource: list,\n    total,\n    loading,\n    current,\n  };\n  const userModalProps={};\n\n  return (\n    <div className={styles.normal}>\n      {/* 用户筛选搜索框 */}\n      <UserSearch {...userSearchProps} />\n      {/* 用户信息展示列表 */}\n      <UserList {...userListProps} />\n      {/* 添加用户 & 修改用户弹出的浮层 */}\n      <UserModal {...userModalProps} />\n    </div>\n  );\n}\n\n// 声明组件的props类型\nUsers.propTypes = {\n  users: PropTypes.object,\n};\n\n// 指定订阅数据，并且关联到users中\nfunction mapStateToProps({ users }) {\n  return {users};\n}\n\n// 建立数据关联关系\nexport default connect(mapStateToProps)(Users);\n")])])]),n("h4",{attrs:{id:"_4-3-3-第三步-通过发起action-在组件中获取model中的数据"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-3-第三步-通过发起action-在组件中获取model中的数据"}},[e._v("#")]),e._v(" 4.3.3 第三步：通过发起Action，在组件中获取Model中的数据")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// models/users.js\n// 在组件生成后发出action，示例：\ncomponentDidMount() {\n  this.props.dispatch({\n    type: 'model/action',     // type对应action的名字\n  });\n}\n\n// 在本次实践中，在访问/users/路由时，就是我们获取用户数据的时机\n// 因此把dispatch移至subscription中\n// subcription，订阅(或是监听)一个数据源，然后根据条件dispatch对应的action\n// 数据源可以是当前的时间、服务器的 websocket 连接、keyboard 输入、geolocation 变化、history 路由变化等等  \n// 此处订阅的数据源就是路由信息，当路由为/users，则派发'querySuccess'这个effects方法\nsubscriptions: {\n    setup({ dispatch, history }) {\n      history.listen(location => {\n        if (location.pathname === '/users') {\n          dispatch({\n            type: 'querySuccess',\n            payload: {}\n          });\n        }\n      });\n    },\n  },\n")])])]),n("h4",{attrs:{id:"_4-3-4-第四步-在index-js中添加models"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-4-第四步-在index-js中添加models"}},[e._v("#")]),e._v(" 4.3.4 第四步： 在index.js中添加models")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// model必须在此完成注册，才能全局有效\n// index.js\napp.model(require('./models/users.js'));\n")])])]),n("h4",{attrs:{id:"_4-4-添加effects"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-添加effects"}},[e._v("#")]),e._v(" 4.4 添加Effects")]),e._v(" "),n("blockquote",[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Effects`的作用在于处理异步函数，控制数据流程。\n因为在真实场景中，数据都来自服务器，需要在发起异步请求获得返回值后再设置数据，更新`state`。\n因此我们往往在`Effects`中调用`reducer\n")])])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("export default {\n  namespace: 'users',\n  state： {}，\n  subscriptions: {},\n  effects: {\n    // 添加effects函数\n    // call与put是dva的函数\n    // call调用执行一个函数\n    // put则是dispatch执行一个action\n    // select用于访问其他model\n    *query({ payload }, { select, call, put }) {\n        yield put({ type: 'showLoading' });\n        const { data } = yield call(query);\n        if (data) {\n          yield put({\n            type: 'querySuccess',\n            payload: {\n              list: data.data,\n              total: data.page.total,\n              current: data.page.current\n            }\n          });\n        }\n      },\n    },\n  reducers: {}\n}\n\n\n\n// 添加请求处理   包含了一个ajax请求\n// models/users.js\nimport request from '../utils/request';\nimport qs from 'qs';\nasync function query(params) {\n  return request(`/api/users?${qs.stringify(params)}`);\n}\n")])])]),n("h4",{attrs:{id:"_4-5-把请求处理分离到service中"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-把请求处理分离到service中"}},[e._v("#")]),e._v(" 4.5 把请求处理分离到service中")]),e._v(" "),n("blockquote",[n("p",[e._v("用意在于分离(可复用的)ajax请求")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// services/users.js\nimport request from '../utils/request';\nimport qs from 'qs';\nexport async function query(params) {\n  return request(`/api/users?${qs.stringify(params)}`);\n}\n\n// 在models中引用\n// models/users.js\nimport {query} from '../services/users';\n")])])]),n("h2",{attrs:{id:"五、使用dva框架和直接使用redux写法的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#五、使用dva框架和直接使用redux写法的区别"}},[e._v("#")]),e._v(" 五、使用dva框架和直接使用redux写法的区别")]),e._v(" "),n("h3",{attrs:{id:"_5-1-使用-redux"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-使用-redux"}},[e._v("#")]),e._v(" 5.1 使用 redux")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// action.js\n\nexport const REQUEST_TODO = 'REQUEST_TODO';\nexport const RESPONSE_TODO = 'RESPONSE_TODO';\n\nconst request = count => ({type: REQUEST_TODO, payload: {loading: true, count}});\n\nconst response = count => ({type: RESPONSE_TODO, payload: {loading: false, count}});\n\nexport const fetch = count => {\n  return (dispatch) => {\n    dispatch(request(count));\n\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve(count + 1);\n      }, 1000)\n    }).then(data => {\n      dispatch(response(data))\n    })\n  }\n}\n//reducer.js\nimport { REQUEST_TODO, RESPONSE_TODO } from './actions';\n\nexport default (state = {\n  loading: false,\n  count: 0\n}, action) => {\n  switch (action.type) {\n    case REQUEST_TODO:\n      return {...state, ...action.payload};\n    case RESPONSE_TODO:\n      return {...state, ...action.payload};\n    default:\n      return state;\n  }\n}\n// app.js\nimport React from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n\nimport * as actions from './actions';\n\nconst App = ({fetch, count, loading}) => {\n  return (\n    <div>\n      {loading ? <div>loading...</div> : <div>{count}</div>}\n      <button onClick={() => fetch(count)}>add</button>\n    </div>\n  )\n}\n\nfunction mapStateToProps(state) {\n  return state;\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(actions, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n//index.js\nimport { render } from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux'\nimport thunkMiddleware from 'redux-thunk';\n\nimport reducer from './app/reducer';\nimport App from './app/app';\n\nconst store = createStore(reducer, applyMiddleware(thunkMiddleware));\n\nrender(\n  <Provider store={store}>\n    <App/>\n  </Provider>\n  ,\n  document.getElementById('app')\n)\n")])])]),n("h3",{attrs:{id:"_5-2-使用dva"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-使用dva"}},[e._v("#")]),e._v(" 5.2 使用dva")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// model.js\nexport default {\n  namespace: 'demo',\n  state: {\n    loading: false,\n    count: 0\n  },\n  reducers: {\n    request(state, payload) {\n      return {...state, ...payload};\n    },\n    response(state, payload) {\n      return {...state, ...payload};\n    }\n  },\n  effects: {\n    *'fetch'(action, {put, call}) {\n      yield put({type: 'request', loading: true});\n\n      let count = yield call((count) => {\n        return new Promise(resolve => {\n          setTimeout(() => {\n            resolve(count + 1);\n          }, 1000);\n        });\n      }, action.count);\n\n      yield put({\n        type: 'response',\n        loading: false,\n        count\n      });\n    }\n  }\n}\n//app.js\n\nimport React from 'react'\nimport { connect } from 'dva';\n\nconst App = ({fetch, count, loading}) => {\n  return (\n    <div>\n      {loading ? <div>loading...</div> : <div>{count}</div>}\n      <button onClick={() => fetch(count)}>add</button>\n    </div>\n  )\n}\n\nfunction mapStateToProps(state) {\n  return state.demo;\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    fetch(count){\n      dispatch({type: 'demo/fetch', count});\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n// index.js\nimport dva from 'dva';\nimport model from './model';\nimport App from './app';\n\nconst app = dva();\n\napp.use({});\n\napp.model(model);\n\napp.router(() => <App />);\n\napp.start();\n")])])]),n("ul",[n("li",[e._v("使用 "),n("code",[e._v("redux")]),e._v(" 需要拆分出"),n("code",[e._v("action")]),e._v("模块和"),n("code",[e._v("reducer")]),e._v("模块")]),e._v(" "),n("li",[n("code",[e._v("dva")]),e._v("将"),n("code",[e._v("action")]),e._v("和"),n("code",[e._v("reducer")]),e._v("封装到"),n("code",[e._v("model")]),e._v("中，异步流程采用"),n("code",[e._v("Generator")]),e._v("处理")])]),e._v(" "),n("h2",{attrs:{id:"六、使用axios统一处理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#六、使用axios统一处理"}},[e._v("#")]),e._v(" 六、使用axios统一处理")]),e._v(" "),n("h3",{attrs:{id:"_6-1-示例代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-示例代码"}},[e._v("#")]),e._v(" 6.1 示例代码")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// request.js\nimport axios from 'axios';\nimport NProgress from 'nprogress';\nimport { notification, message } from 'antd';\nimport { routerRedux } from 'dva/router';\nimport store from '../index';\n\n/**\n * 一、功能：\n * 1. 统一拦截http错误请求码；\n * 2. 统一拦截业务错误代码；\n * 3. 统一设置请求前缀\n * |-- 每个 http 加前缀 baseURL = /api/v1，从配置文件中获取 apiPrefix\n * 4. 配置异步请求过渡状态：显示蓝色加载条表示正在请求中，避免给用户页面假死的不好体验。\n * |-- 使用 NProgress 工具库。\n * \n * 二、引包：\n * |-- axios：http 请求工具库\n * |-- NProgress：异步请求过度条，在浏览器主体部分顶部显示蓝色小条\n * |-- notification：Antd组件 > 处理错误响应码提示信息\n * |-- routerRedux：dva/router对象，用于路由跳转，错误响应码跳转相应页面\n * |-- store：dva中对象，使用里面的 dispatch 对象，用于触发路由跳转\n */\n\n// 设置全局参数，如响应超市时间，请求前缀等。\naxios.defaults.timeout = 5000\naxios.defaults.baseURL = '/api/v1';\naxios.defaults.withCredentials = true;\n\n// 状态码错误信息\nconst codeMessage = {\n  200: '服务器成功返回请求的数据。',\n  201: '新建或修改数据成功。',\n  202: '一个请求已经进入后台排队（异步任务）。',\n  204: '删除数据成功。',\n  400: '发出的请求有错误，服务器没有进行新建或修改数据的操作。',\n  401: '用户没有权限（令牌、用户名、密码错误）。',\n  403: '用户得到授权，但是访问是被禁止的。',\n  404: '发出的请求针对的是不存在的记录，服务器没有进行操作。',\n  406: '请求的格式不可得。',\n  410: '请求的资源被永久删除，且不会再得到的。',\n  422: '当创建一个对象时，发生一个验证错误。',\n  500: '服务器发生错误，请检查服务器。',\n  502: '网关错误。',\n  503: '服务不可用，服务器暂时过载或维护。',\n  504: '网关超时。',\n};\n\n// 添加一个请求拦截器，用于设置请求过渡状态\naxios.interceptors.request.use((config) => {\n  // 请求开始，蓝色过渡滚动条开始出现\n  NProgress.start();\n  return config;\n}, (error) => {\n  return Promise.reject(error);\n});\n\n// 添加一个返回拦截器\naxios.interceptors.response.use((response) => {\n  // 请求结束，蓝色过渡滚动条消失\n  NProgress.done();\n  return response;\n}, (error) => {\n  // 请求结束，蓝色过渡滚动条消失\n  // 即使出现异常，也要调用关闭方法，否则一直处于加载状态很奇怪\n  NProgress.done();\n  return Promise.reject(error);\n});\n\nexport default function request (opt) {\n  // 调用 axios api，统一拦截\n  return axios(opt)\n    .then((response) => \n      // >>>>>>>>>>>>>> 请求成功 <<<<<<<<<<<<<<\n      console.log(`【${opt.method} ${opt.url}】请求成功，响应数据：%o`, response);\n\n      // 打印业务错误提示\n      if (response.data && response.data.code != '0000') {\n        message.error(response.data.message);\n      }\n\n      return { ...response.data };\n    })\n    .catch((error) => {\n      // >>>>>>>>>>>>>> 请求失败 <<<<<<<<<<<<<<\n      // 请求配置发生的错误\n      if (!error.response) {\n        return console.log('Error', error.message);\n      }\n\n      // 响应时状态码处理 \n      const status = error.response.status;\n      const errortext = codeMessage[status] || error.response.statusText;\n      \n      notification.error({\n        message: `请求错误 ${status}`,\n        description: errortext,\n      });\n      \n      // 存在请求，但是服务器的返回一个状态码，它们都在2xx之外\n      const { dispatch } = store;\n\n      if (status === 401) {\n        dispatch(routerRedux.push('/user/login'));\n      } else if (status === 403) {\n        dispatch(routerRedux.push('/exception/403'));\n      } else if (status <= 504 && status >= 500) {\n        dispatch(routerRedux.push('/exception/500'));\n      } else if (status >= 404 && status < 422) {\n        dispatch(routerRedux.push('/exception/404'));\n      }\n\n      // 开发时使用，上线时删除\n      console.log(`【${opt.method} ${opt.url}】请求失败，响应数据：%o`, error.response);\n\n      return { code: status, message: errortext }; \n    });\n}\n")])])]),n("h3",{attrs:{id:"_6-2-明确响应体"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-明确响应体"}},[e._v("#")]),e._v(" 6.2 明确响应体")]),e._v(" "),n("blockquote",[n("p",[e._v("以微信小程序为例，请求响应数据分为两部分：")])]),e._v(" "),n("ul",[n("li",[e._v("网络请求是否成功；")]),e._v(" "),n("li",[e._v("业务场景值。即便网络请求成功了，业务处理上可能有时也会出错，比如校验不通过")])]),e._v(" "),n("p",[e._v("我们在拦截响应时要分别对这两部分进行处理")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("response = {\n  status: 200,                // 网络请求状态。\n  statusText: 'xxx',\n  data: {\n    code: '1001',             // 业务请求状态。这里 '0000' 表示业务没问题，其它都有问题\n    message: 'yyy',\n    data: {  },\n  }\n}\n")])])]),n("h3",{attrs:{id:"_6-3-依赖包分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-依赖包分析"}},[e._v("#")]),e._v(" 6.3 依赖包分析")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import axios from 'axios';\nimport NProgress from 'nprogress';\nimport { notification, message } from 'antd';\nimport { routerRedux } from 'dva/router';\nimport store from '../index';\n")])])]),n("blockquote",[n("p",[n("code",[e._v("import store from '../index';")]),e._v("这是 "),n("code",[e._v("dva")]),e._v(" 中导出的对象。即下面代码最终导出的 "),n("code",[e._v("app._store")]),e._v("，引入它是因为 "),n("code",[e._v("dispatch")]),e._v(" 对象在里面，我们需要 dispatch 对象进行路由跳转")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// index.js\nimport dva from 'dva';\nimport { message } from 'antd';\nimport { createBrowserHistory as createHistory } from 'history';\n\n// 1. Initialize\nconst app = dva({\n  history: createHistory(),\n});\n\n// 2. Plugins\napp.use(createLoading());\n\n// 3. Model\napp.model(require('./models/app/global').default);\n\n// 4. Router\napp.router(require('./router').default);\n\n// 5. Start\napp.start('#root');\n\nexport default app._store;\n")])])]),n("h3",{attrs:{id:"_6-4-axios-全局配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-axios-全局配置"}},[e._v("#")]),e._v(" 6.4 axios 全局配置")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 设置全局参数，如响应超市时间，请求前缀等。\naxios.defaults.timeout = 5000\naxios.defaults.baseURL = '/api/v1';\naxios.defaults.withCredentials = true;\n")])])]),n("blockquote",[n("p",[e._v("axios 可以设置很多全局配置，具体可参阅 https://segmentfault.com/a/1190000008470355")])]),e._v(" "),n("h3",{attrs:{id:"_6-5-加载-nprogress-过渡组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-5-加载-nprogress-过渡组件"}},[e._v("#")]),e._v(" 6.5 加载 NProgress 过渡组件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("/ 添加一个请求拦截器，用于设置请求过渡状态\naxios.interceptors.request.use((config) => {\n  // 请求开始，蓝色过渡滚动条开始出现\n  NProgress.start();\n  return config;\n}, (error) => {\n  return Promise.reject(error);\n});\n\n// 添加一个返回拦截器\naxios.interceptors.response.use((response) => {\n  // 请求结束，蓝色过渡滚动条消失\n  NProgress.done();\n  return response;\n}, (error) => {\n  // 请求结束，蓝色过渡滚动条消失\n  // 即使出现异常，也要调用关闭方法，否则一直处于加载状态很奇怪\n  NProgress.done();\n  return Promise.reject(error);\n});\n")])])]),n("blockquote",[n("p",[n("code",[e._v("NProgress")]),e._v(" 的使用主要有两个方法，当调用 "),n("code",[e._v("NProgress.start();")]),e._v(" 时在浏览器顶部就会出现蓝色小条，当调用 "),n("code",[e._v("NProgress.done();")]),e._v(" 蓝色小条就会消失。我们分别在请求开始和接收到响应调用这两个方法")])]),e._v(" "),n("p",[n("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://s.poetries.top/uploads/2022/07/68f90d38a995abb8.png",loading:"lazy"}})]),e._v(" "),n("h3",{attrs:{id:"_6-6-网络请求成功处理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-6-网络请求成功处理"}},[e._v("#")]),e._v(" 6.6 网络请求成功处理")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(".then((response) => \n      // >>>>>>>>>>>>>> 请求成功 <<<<<<<<<<<<<<\n      console.log(`【${opt.method} ${opt.url}】请求成功，响应数据：%o`, response);\n\n      // 打印业务错误提示\n      if (response.data && response.data.code != '0000') {\n        message.error(response.data.message);\n      }\n\n      return { ...response.data };\n    })\n")])])]),n("blockquote",[n("p",[e._v("网络请求状态码为 "),n("code",[e._v("200-300")]),e._v(" 表示成功，此时还应该判断业务处理是否成功。这个根据具体项目具体规定，比如微信小程序有一套场景值。在实际项目中可以自行规定 "),n("code",[e._v("code = '0000'")]),e._v(" 业务处理完全没问题，"),n("code",[e._v("code = '1111'")]),e._v("校验不通过，"),n("code",[e._v("code = '2222'")]),e._v(" 数据库出错等等。")])]),e._v(" "),n("ul",[n("li",[e._v("最后别忘了要返回具体对象 "),n("code",[e._v("{ ...response.data }")])])]),e._v(" "),n("h3",{attrs:{id:"_6-7-网络请求失败处理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-7-网络请求失败处理"}},[e._v("#")]),e._v(" 6.7 网络请求失败处理")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 状态码错误信息\nconst codeMessage = {\n  200: '服务器成功返回请求的数据。',\n  201: '新建或修改数据成功。',\n  202: '一个请求已经进入后台排队（异步任务）。',\n  204: '删除数据成功。',\n  400: '发出的请求有错误，服务器没有进行新建或修改数据的操作。',\n  401: '用户没有权限（令牌、用户名、密码错误）。',\n  403: '用户得到授权，但是访问是被禁止的。',\n  404: '发出的请求针对的是不存在的记录，服务器没有进行操作。',\n  406: '请求的格式不可得。',\n  410: '请求的资源被永久删除，且不会再得到的。',\n  422: '当创建一个对象时，发生一个验证错误。',\n  500: '服务器发生错误，请检查服务器。',\n  502: '网关错误。',\n  503: '服务不可用，服务器暂时过载或维护。',\n  504: '网关超时。',\n};\n\n// ...........\n\n.catch((error) => {\n      // >>>>>>>>>>>>>> 请求失败 <<<<<<<<<<<<<<\n      // 请求配置发生的错误\n      if (!error.response) {\n        return console.log('Error', error.message);\n      }\n\n      // 响应时状态码处理 \n      const status = error.response.status;\n      const errortext = codeMessage[status] || error.response.statusText;\n      \n      notification.error({\n        message: `请求错误 ${status}`,\n        description: errortext,\n      });\n      \n      // 存在请求，但是服务器的返回一个状态码，它们都在2xx之外\n      const { dispatch } = store;\n\n      if (status === 401) {\n        dispatch(routerRedux.push('/user/login'));\n      } else if (status === 403) {\n        dispatch(routerRedux.push('/exception/403'));\n      } else if (status <= 504 && status >= 500) {\n        dispatch(routerRedux.push('/exception/500'));\n      } else if (status >= 404 && status < 422) {\n        dispatch(routerRedux.push('/exception/404'));\n      }\n\n      // 开发时使用，上线时删除\n      console.log(`【${opt.method} ${opt.url}】请求失败，响应数据：%o`, error.response);\n\n      return { code: status, message: errortext }; \n    });\n")])])]),n("ul",[n("li",[e._v("网络请求失败，首先需要根据 "),n("code",[e._v("status")]),e._v(" 打印提示消息，告诉用户为什么请求失败。如响应码为 "),n("code",[e._v("401")]),e._v("，那么提示用户的文字就会是 用户没有权限（令牌、用户名、密码错误）")]),e._v(" "),n("li",[e._v("如果是 "),n("code",[e._v("401")]),e._v(" 错误，表示用户没有权限访问或者用户名密码输入错误，应该跳转到登录页面：`dispatch(routerRedux.push('/user/login'));")])])])}),[],!1,null,null,null);t.default=s.exports}}]);